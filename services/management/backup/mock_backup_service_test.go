// Code generated by mockery v1.0.0. DO NOT EDIT.

package backup

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/percona/pmm-managed/models"
)

// mockBackupService is an autogenerated mock type for the backupService type
type mockBackupService struct {
	mock.Mock
}

// PerformBackup provides a mock function with given fields: ctx, serviceID, locationID, name, mode, scheduleID
func (_m *mockBackupService) PerformBackup(ctx context.Context, serviceID string, locationID string, name string, mode models.BackupMode, scheduleID string) (string, error) {
	ret := _m.Called(ctx, serviceID, locationID, name, mode, scheduleID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, models.BackupMode, string) string); ok {
		r0 = rf(ctx, serviceID, locationID, name, mode, scheduleID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, models.BackupMode, string) error); ok {
		r1 = rf(ctx, serviceID, locationID, name, mode, scheduleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreBackup provides a mock function with given fields: ctx, serviceID, artifactID
func (_m *mockBackupService) RestoreBackup(ctx context.Context, serviceID string, artifactID string) (string, error) {
	ret := _m.Called(ctx, serviceID, artifactID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, serviceID, artifactID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, serviceID, artifactID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwitchMongoPITR provides a mock function with given fields: ctx, serviceID, enabled
func (_m *mockBackupService) SwitchMongoPITR(ctx context.Context, serviceID string, enabled bool) error {
	ret := _m.Called(ctx, serviceID, enabled)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, serviceID, enabled)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
