// Code generated by mockery v1.0.0. DO NOT EDIT.

package ia

import (
	context "context"

	ammodels "github.com/percona/pmm/api/alertmanager/ammodels"

	mock "github.com/stretchr/testify/mock"
)

// mockAlertManager is an autogenerated mock type for the alertManager type
type mockAlertManager struct {
	mock.Mock
}

// GetAlerts provides a mock function with given fields: ctx
func (_m *mockAlertManager) GetAlerts(ctx context.Context) ([]*ammodels.GettableAlert, error) {
	ret := _m.Called(ctx)

	var r0 []*ammodels.GettableAlert
	if rf, ok := ret.Get(0).(func(context.Context) []*ammodels.GettableAlert); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ammodels.GettableAlert)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestConfigurationUpdate provides a mock function with given fields:
func (_m *mockAlertManager) RequestConfigurationUpdate() {
	_m.Called()
}

// Silence provides a mock function with given fields: ctx, ids
func (_m *mockAlertManager) Silence(ctx context.Context, ids []string) error {
	ret := _m.Called(ctx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SilenceAll provides a mock function with given fields: ctx
func (_m *mockAlertManager) SilenceAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsilence provides a mock function with given fields: ctx, ids
func (_m *mockAlertManager) Unsilence(ctx context.Context, ids []string) error {
	ret := _m.Called(ctx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnsilenceAll provides a mock function with given fields: ctx
func (_m *mockAlertManager) UnsilenceAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
